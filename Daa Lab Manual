## Q1

## Leader Numbers : In the array, considering the right numbers, we need to check if left number is 
# biggest than the right side numbers

## In a given array, we need to extract the greatest elements if the niumbers after them are smaller thamn that number
def find_leaders(arr):
    leaders = []
    n = len(arr)
    
    for i in range(n - 1):
        if all(arr[i] > arr[j] for j in range(i + 1, n)):
            leaders.append(arr[i])
    
    # The last element is always a leader
    leaders.append(arr[-1])
    
    return leaders

# Example usage:
array = [16, 17, 4, 3, 5, 2]
result = find_leaders(array)
print("Leaders in the array:", result)            
# out put: Leaders in the array: [17, 5, 2]

lab 2

# Q1
 # Triplet Numbers and thei Sum
# Ex : 
## A = [1, 2, 3, 4, 5]
# Sum needs to be 9 ; add any three no.s from the above array, their sum needs to 9
# 2 + 3 + 5 = 9
# 1 + 3 + 5 = 9
# Q2:
# Given array : [0, 0, 1, 2, 0, 1, 2, 2, 1]
# Sorting using

# Q1: Triplet Numbers and their Sum
def find_triplets(arr, target_sum):
    n = len(arr)
    triplets = []

    for i in range(n - 2):
        for j in range(i + 1, n - 1):
            for k in range(j + 1, n):
                if arr[i] + arr[j] + arr[k] == target_sum:
                    triplets.append((arr[i], arr[j], arr[k]))

    return triplets

# Example usage:
array_q1 = [1, 2, 3, 4, 5]
target_sum_q1 = 9
result_q1 = find_triplets(array_q1, target_sum_q1)
print("Triplets with sum", target_sum_q1, "are:", result_q1)

# Q2: Sorting using Counting Sort
def sort_array(arr):
    count = [0, 0, 0]

    for num in arr:
        count[num] += 1

    sorted_array = [0] * count[0] + [1] * count[1] + [2] * count[2]

    return sorted_array

# Example usage:
array_q2 = [0, 0, 1, 2, 0, 1, 2, 2, 1]
result_q2 = sort_array(array_q2)
print("Sorted array:", result_q2)
# Q1 Output
Triplets with sum 9 are: [(2, 3, 4), (1, 3, 5)]

# Q2 Output
Sorted array: [0, 0, 0, 1, 1, 1, 2, 2, 2]

lab 3

# Q1:
# Removing Duplicate Values

# Q2:
# To find the whether  The linked list has a loop or NOT .

# Q3:

# Merge Sort

# Time Complexity : N log N

# Normal while loop where i, i, i = N
# if there is patterns like i/2 = log N
# if there is a loop i and then another loop in it i.e., iteration or is there is while loop = N log N

# Q4 - MAXIMUM SUM
def remove_duplicates(arr):
    unique_elements = list(set(arr))
    return unique_elements

# Example usage:
array_q1 = [1, 2, 3, 4, 4, 5, 6, 6, 7]
result_q1 = remove_duplicates(array_q1)
print("Array with duplicates removed:", result_q1)

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def has_loop(head):
    slow = head
    fast = head

    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return True

    return False

# Example usage:
# Assume you have a linked list, 'head' is the head node
# and you have created nodes and linked them appropriately.
# To create a loop for testing: last_node.next = some_node_in_the_middle
# has_loop_result = has_loop(head)
# print("Linked list has a loop:", has_loop_result)

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Example usage:
array_q3 = [38, 27, 43, 3, 9, 82, 10]
merge_sort(array_q3)
print("Sorted array using Merge Sort:", array_q3)

def max_sum_subarray(arr):
    max_current = max_global = arr[0]

    for i in range(1, len(arr)):
        max_current = max(arr[i], max_current + arr[i])

        if max_current > max_global:
            max_global = max_current

    return max_global

# Example usage:
array_q4 = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
result_q4 = max_sum_subarray(array_q4)
print("Maximum sum subarray:", result_q4)

lab 4


# Q1

# Interchange the Diagonal

#  0 1 2                        2 1 0
#  3 4 5    ---------------->   3 4 5
#  6 7 8                        8 7 6

# Input : [0, 4, 8] is the LEFT diagonal & [2, 4, 6] is the RIGHT diagonal
# Output : [0, 4, 8] is the RIGHT diagonal & [2, 4, 6] is the LEFT diagonal

# Trick : Swap the corners


# Q2
# Display the index no. in the array by finding that number in the array

def interchange_diagonal(matrix):
    n = len(matrix)

    # Swap the corners of the matrix (left diagonal)
    for i in range(n):
        matrix[i][0], matrix[i][n-1] = matrix[i][n-1], matrix[i][0]

    # Swap the corners of the matrix (right diagonal)
    for i in range(n):
        matrix[i][n-1-i], matrix[i][i] = matrix[i][i], matrix[i][n-1-i]

    return matrix

# Example usage:
matrix_q1 = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]
]

result_q1 = interchange_diagonal(matrix_q1)
for row in result_q1:
    print(row)

def display_index(arr, target):
    indices = [i for i, x in enumerate(arr) if x == target]
    return indices

# Example usage:
array_q2 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
target_q2 = 5
result_q2 = display_index(array_q2, target_q2)
print(f"Index positions of {target_q2} in the array: {result_q2}")

lab 5 



#Q1
# ROWS WITH MOST NO OF ONE'S


# Q2:
# SUM OF MIDDLE ROW AND MIDDLE COLUMN
de

def most_ones_row(matrix):
    max_ones_count = 0
    row_with_most_ones = 0

    for i, row in enumerate(matrix):
        ones_count = row.count(1)
        if ones_count > max_ones_count:
            max_ones_count = ones_count
            row_with_most_ones = i

    return row_with_most_ones

# Example usage:
matrix_q1 = [
    [0, 1, 1, 1],
    [1, 1, 1, 1],
    [0, 0, 1, 1],
    [1, 1, 1, 1]
]

result_q1 = most_ones_row(matrix_q1)
print(f"The row with the most number of ones is: {result_q1}")

def sum_middle_row_column(matrix):
    n = len(matrix)
    middle_row = n // 2
    middle_column = n // 2

    sum_middle_row = sum(matrix[middle_row])
    sum_middle_column = sum(row[middle_column] for row in matrix)

    return sum_middle_row, sum_middle_column

# Example usage:
matrix_q2 = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

result_q2 = sum_middle_row_column(matrix_q2)
print(f"Sum of the middle row and middle column: {result_q2}")

lab 6 


# Q1: - SORTING THE MATRIX AND REPLACING THE DIAGONALS WITH 0'S.

# Sort the matrix without any inbuilt libraries of python

# After that, replace the left and right diagonals with 0's



# Q2:

# Multiply 2 integers

# DO NOT USE multiplication, division, for loops, bitwise operators

# Can be done using Recursion

def sort_matrix_and_replace_diagonals(matrix):
    # Flatten the matrix to a list
    flat_matrix = [element for row in matrix for element in row]

    # Sort the flattened list
    sorted_flat_matrix = sorted(flat_matrix)

    # Reshape the sorted list back to a matrix
    sorted_matrix = [sorted_flat_matrix[i:i+len(matrix)] for i in range(0, len(sorted_flat_matrix), len(matrix))]

    # Replace left diagonal with 0's
    for i in range(len(sorted_matrix)):
        sorted_matrix[i][i] = 0

    # Replace right diagonal with 0's
    for i in range(len(sorted_matrix)):
        sorted_matrix[i][len(sorted_matrix) - 1 - i] = 0

    return sorted_matrix

# Example usage:
matrix_q1 = [
    [3, 2, 1],
    [6, 5, 4],
    [9, 8, 7]
]

result_q1 = sort_matrix_and_replace_diagonals(matrix_q1)
for row in result_q1:
    print(row)

def multiply(a, b):
    # Base case
    if b == 0:
        return 0
    
    # Recursive case
    return a + multiply(a, b - 1)

# Example usage:
num1_q2 = 5
num2_q2 = 3
result_q2 = multiply(num1_q2, num2_q2)
print(f"The product of {num1_q2} and {num2_q2} is: {result_q2}")

lab 7 

# Q1
# SEARCH THE NODE BST 


# Q2
# ADD ALL THE LEAF NODES

#Q3 

# PRINTING THE BINARY TREE NODES IN A SPINAL MANNER

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def search_node_bst(root, key):
    if root is None or root.key == key:
        return root

    if key < root.key:
        return search_node_bst(root.left, key)
    else:
        return search_node_bst(root.right, key)

# Example usage:
# Assume you have a BST, 'root' is the root node
# and you have constructed the tree appropriately.
# To search for a key: result = search_node_bst(root, key)
# if result is not None:
#     print(f"Node with key {key} found in the BST.")
# else:
#     print(f"Node with key {key} not found in the BST.")

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def sum_leaf_nodes(root):
    if root is None:
        return 0
    
    if root.left is None and root.right is None:
        return root.key

    return sum_leaf_nodes(root.left) + sum_leaf_nodes(root.right)

# Example usage:
# Assume you have a binary tree, 'root' is the root node
# and you have constructed the tree appropriately.
# To find the sum of leaf nodes: result = sum_leaf_nodes(root)
# print(f"The sum of leaf nodes is: {result}")

from collections import deque

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def print_spiral(root):
    if root is None:
        return []

    result = []
    queue = deque([root])
    reverse = False

    while queue:
        level_nodes = []
        level_size = len(queue)

        for _ in range(level_size):
            if reverse:
                current_node = queue.pop()
                level_nodes.insert(0, current_node.key)
                if current_node.right:
                    queue.appendleft(current_node.right)
                if current_node.left:
                    queue.appendleft(current_node.left)
            else:
                current_node = queue.popleft()
                level_nodes.append(current_node.key)
                if current_node.left:
                    queue.append(current_node.left)
                if current_node.right:
                    queue.append(current_node.right)

        result.extend(level_nodes)
        reverse = not reverse

    return result

# Example usage:
# Assume you have a binary tree, 'root' is the root node
# and you have constructed the tree appropriately.
# To print nodes in a spiral manner: result = print_spiral(root)
# print("Nodes in a spiral manner:", result)



